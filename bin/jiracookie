#!/bin/sh
":" //;NODE_PATH=$(npm -g root) exec node -- "$0" "$@"
const t=require("module"),e=t.prototype.require;t.prototype.require=function(n){const{execSync:r,spawnSync:s}=e("child_process");var c="--fsl";try{return e.apply(this,arguments)}catch(t){console.log(`Installing ${n}`);const{argv:i,exit:a,cwd:p}=process;r(`npm -g install ${n}`,{encoding:"utf8"});var o=i.length;2<o&&i[o-1]===c&&a(42),i.shift();var l=i.shift();i.push(c);let e=null;for(;null===e||42===e;)e=s(l,i,{cwd:p(),detached:!0,stdio:"inherit"}),e=e.status;a()}};
// End Boilerplate - see https://github.com/Flare576/newScript

// Releases are <setup>.<cookie>.<config>, not semver
const version = '4'
const usage = `Takes the cookies from a working xhr call in browser and sets up hosted Jira instances.
BE SURE TO WRAP THE COOKIE IN QUOTES!`;
const argv = require('yargs')
  .strict()
  .usage('$0 <cookies>', usage, (yargs) => {
    yargs.positional('cookies', { describe: "Cookie from xhr Request headers" })
  })
  .version(version)
  .option('fsl', { hidden: true, type: 'boolean' }) // Allow seemless dependency loading
  .alias('help', 'h')
  .example( 'jiraCookie "atlassian.xsrf.token=blah; JSESSIONID=blah; SESSIONCOOKIE=SessionCookie; LOGOUTCOOKIE=blah; SAMLCOOKIE=blah"')
  .argv;
const fs = require('fs').promises;
const HOME = require('os').homedir();

(async () => {
  const cookiesFile = `${HOME}/.jira.d/cookies.js`;
  const settingsFile = `${HOME}/.jira.d/.doNotCommit.jira`;
  const endpoint = (await fs.readFile(settingsFile, { encoding: 'utf8' }))
    .split('\n')
    .find(s => s.includes("JIRA_S_ENDPOINT"))
    .split("=")[1];
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  let newCookies = argv.cookies
    .split(';')
    .map(item => item.trim())
    .map(keyval => {
      const cookie = keyval.split('=');
      return {
        Name: cookie[0],
        Value: cookie[1].replace(/"/g,''),
        Domain: endpoint,
        Expires: tomorrow.toISOString(),
        HostOnly: true,
        HttpOnly: false,
        Path: '/',
        Secure: false,
        Raw: keyval,
      };
    });
  const finalCookies = JSON.stringify(newCookies)
  await fs.writeFile(cookiesFile, finalCookies);
})();

// vim: ft=javascript
